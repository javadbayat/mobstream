<?xml version="1.0"?>
<?component error="true" debug="false"?>
<component id="mobStream">
    <registration 
        progid="ADODB.MOBStream"
        classid="{F2EEC5C2-4723-4719-9486-A377EB5C389C}"
        description="Magical Output Binary Stream (MOBS) Library"
        version="1"
    />
    
    <public>
        <method name="Init">
            <parameter name="seedPath" />
            <parameter name="seedOffset" />
        </method>
        <method name="Open">
            <parameter name="filePath" />
        </method>
        <method name="Write">
            <parameter name="data" />
        </method>
        <method name="Close" />
        
        <property name="Size" get />
        <property name="Info" get dispid="0" />
        <property name="Version" get />
        
        <method name="ZipInit">
            <parameter name="supplyShell" />
            <parameter name="supplyFSO" />
            <parameter name="supplyWmiServices" />
        </method>
        <method name="ZipOpen">
            <parameter name="zipFilePath" />
        </method>
        <method name="ZipAdd">
            <parameter name="zipItem" />
            <parameter name="shellFlags" />
            <parameter name="flags" />
        </method>
        <method name="ZipPoll">
            <parameter name="timeout" />
        </method>
        <method name="ZipClose" />
    </public>
    
    <resource id="sleeperWQL">
        <![CDATA[
        SELECT * FROM __InstanceModificationEvent
        WHERE
            TargetInstance ISA "Win32_LocalTime"
        ]]>
    </resource>
    
    <script language="jscript">
        <![CDATA[
        // The underlying ADODB.Stream object that is used to write
        // binary data to the files that the user has requested.
        var g_stream = new ActiveXObject("ADODB.Stream");
        
        // The Byte Value Map (BVM), which is a Dictionary object
        // that maps each number in the range 0 to 255 to a safearray
        // of type VT_UI1 containing the number as a single element.
        // During a write operation, the user requests that a sequence
        // of bytes be written into the stream; so the BVM is queried
        // for each of the bytes in the requested sequence, in order
        // to obtain the corresponding single-element safearray. Then
        // that safearray will be passed to g_stream.Write method, in
        // order to write the requested byte into the underlying stream.
        var g_byteValueMap = new ActiveXObject("Scripting.Dictionary");
        
        // The current file path. Whenever the Open method is called,
        // being passed the path of a file that is to be created, then
        // the given file path is stored in this global variable, for
        // later use by the Close method. Upon calling the Close method,
        // this file path will be passed in a call to g_stream.SaveToFile
        // method, in order to create the final file in the disk. Then
        // the Close method calls g_stream.Close, to close the stream.
        var g_currentFilePath = "";
        
        // The adTypeBinary constant, defined in the ADO enumeration
        // named StreamTypeEnum.
        var adTypeBinary = 1;
        
        // The Init method, whose main task is to initialize
        // and fill in the Byte Value Map (BVM), by loading
        // a "seed file". The seed file is a special file that
        // contains 256 consecutive bytes that store the
        // values 0 to 255 respectively. It provides the data
        // necessary to initialize the records of the BVM.
        // When the Init method reads data from the seed file,
        // it adds a record to the BVM per each byte within
        // the seed; the record has its key set to the offset
        // of the byte and its item set to a safearray containing
        // the value of the byte. Since the offset of the byte
        // and the value of the byte are the same numbers,
        // the BVM can be later used during a write operation
        // to convert a byte value into a safearray that is
        // accepted by the methods of the g_stream object.
        // The Init method must be called right after the
        // library has been instantiated, and before any other
        // methods of the library are called. 
        function Init(seedPath, seedOffset) {
            // The seedPath is an optional parameter. If not specified,
            // it defaults to "mobstream-seed", which is the name of
            // the seed file that is already shipped with the library.
            // Users can leave this parameter blank only if the
            // mobstream-seed file is located in the current directory
            // associated with the process.
            if (!seedPath)
                seedPath = "mobstream-seed";
            
            if (g_byteValueMap.Count)
                throw new Error("MOBStream.Init: The library has already been initialized");
            
            // Create an ADODB.Stream object for reading the seed file.
            // Then initialize it and load the seed file with the given seedPath.
            var seedStream = new ActiveXObject("ADODB.Stream");
            seedStream.Open();
            seedStream.Type = adTypeBinary;
            seedStream.LoadFromFile(seedPath);
            
            // The seedOffset is an optional parameter, which must be
            // specified only if the actual seed data is preceded by
            // a chunk of other data. In this case, a set of bytes
            // will be skipped in the seedStream to reach the actual
            // seed data. This allows arbitrary data to occur in the
            // seed file both before and after the seed data.
            if (seedOffset)
                seedStream.Read(seedOffset);
            
            // Read 256 bytes of data from the seed file and fill in the BVM.
            for (var b = 0; b < 256; b++)
                g_byteValueMap(b) = seedStream.Read(1);
            
            // Finally, close the seedStream to free system resources.
            seedStream.Close();
        }
        
        // The Open method, which is used to open the object
        // in order to create a new binary file. Please note
        // that the given filePath must not represent the
        // path of an existing file. After calling the Open
        // method, the user can call the Write method one or
        // more times to write the desired data into the file.
        // Finally, the user must call the Close method to
        // close the object.
        function Open(filePath) {
            if (!filePath)
                throw new Error("MOBStream.Open: Not enough arguments");
            
            if (!g_byteValueMap.Count)
                throw new Error("MOBStream.Open: The library has not yet been initialized");
            
            if (g_currentFilePath)
                throw new Error("MOBStream.Open: An open file is currently held");
            
            g_stream.Open();
            g_stream.Type = adTypeBinary;
            g_currentFilePath = filePath;
        }
        
        // The Write method, used to write any desired
        // binary data into the file. The data is passsd as
        // an enumerable object (e.g a JScript-based Array)
        // whose elements contain the bytes of the data as
        // unsigned 8-bit integers.
        function Write(data) {
            if (!data)
                throw new Error("MOBStream.Write: Not enough arguments");
            
            if (!g_currentFilePath)
                throw new Error("MOBStream.Write: There is currently no open file to write into");
            
            for (var e = new Enumerator(data); !e.atEnd(); e.moveNext())
                g_stream.Write(g_byteValueMap(e.item()));
        }
        
        // The Close method, used to close the object in order
        // to free the system resources associated with the
        // object. Any call to the Open method must be followed
        // by a call to the Close method.
        function Close() {
            if (!g_currentFilePath)
                throw new Error("MOBStream.Close: There is currently no open file to close");
            
            g_stream.SaveToFile(g_currentFilePath);
            g_stream.Close();
            g_currentFilePath = "";
        }
        
        function get_Size() {
            return g_stream.Size;
        }
        
        function get_Info() {
            return "Magical Output Binary Stream (MOBS) Library\r\n" +
                    "Based on ActiveX Data Objects (ADO) Library";
        }
        
        function get_Version() {
            return "1.0";
        }
        
        function ZipInit(supplyShell, supplyFSO, supplyWmiServices) {
            g_shell = (supplyShell === -1) ? new ActiveXObject("Shell.Application") : supplyShell;
            g_fso = (supplyFSO === -1) ? new ActiveXObject("Scripting.FileSystemObject") : supplyFSO;
            g_services = (supplyWmiServices === -1) ? GetObject("winmgmts:") : supplyWmiServices;
            
            g_zipFilePath = "";
            g_zipFolder = null;
            g_zipFile = null;
            g_eocd = [ 0x50, 0x4B, 0x05, 0x06 ];
            for (var i = 0; i < 18; i++)
                g_eocd.push(0);
            
            ZAF_DELETE_AFTER_ARCHIVING = 1;
            ForAppending = 8;
        }
        
        function ZipOpen(zipFilePath) {
            if ((!!g_fso) && (!g_fso.FileExists(zipFilePath))) {
                Open(zipFilePath);
                Write(g_eocd);
                Close();
            }
            
            if (g_shell)
                g_zipFolder = g_shell.NameSpace(zipFilePath);
            if (g_fso)
                g_zipFile = g_fso.GetFile(zipFilePath);
            
            g_zipFilePath = zipFilePath;
        }
        
        function ZipAdd(zipItem, shellFlags, flags) {
            if (!shellFlags)
                shellFlags = 0;
            
            if (!flags)
                flags = 0;
            
            if (flags & ZAF_DELETE_AFTER_ARCHIVING)
                g_zipFolder.MoveHere(zipItem, shellFlags);
            else
                g_zipFolder.CopyHere(zipItem, shellFlags);
        }
        
        function ZipCheck() {
            try {
                g_zipFile.OpenAsTextStream(ForAppending).Close();
                return true;
            }
            catch (err) {
                if (err.number == -2146828218)
                    return false;
                
                throw err;
            }
        }
        
        function ZipPoll(timeout) {
            if (!timeout)
                return ZipCheck();
            
            var sleeper = g_services.ExecNotificationQuery(getResource("sleeperWQL"));
            var period = 0;
            
            do {
                sleeper.NextEvent();
                
                if (ZipCheck())
                    return true;
                
                period += 1000;
            } while (period < timeout);
            
            return false;
        }
        
        function ZipClose() {
            g_zipFile = g_zipFolder = null;
            g_zipFilePath = "";
        }
        ]]>
    </script>
</component>